*slime.txt*   Grab some text and "send" it to a GNU Screen / tmux / whimrepl session.

Author:  Jonathan Palardy                                    *slime-author*
License: Same terms as Vim itself (see |license|)

This plugin is only available if 'compatible' is not set.

==============================================================================
                                                               *slime*
Grab some text and "send" it to a GNU Screen / tmux / whimrepl session.

	VIM ---(text)---> screen / tmux / whimrepl~

Presumably, your session contains a REPL, maybe Clojure, R or python. If you
can type text into it, vim-slime can send text to it.

The reason you're doing this? Because you want the benefits of a REPL and the
benefits of using Vim (familiar environment, syntax highlighting, persistence
...).

1. Usage				|slime-usage|
2. Screen Configuration 		|slime-screen|
3. Tmux Configuration			|slime-tmux|
4. Neovim Configuration			|slime-neovim|
5. whimrepl Configuration		|slime-whimrepl|
6. vimterminal Configuration		|slime-vimterminal|
7. Slime Configuration			|slime-configuration|
8. Slime Requirements			|slime-requirements|

==============================================================================
1. Slime Usage 					*slime-usage*

						*CTRL-C_CTRL-C* *<c-c><c-c>*
<c-c><c-c>		Send the current paragraph text to screen/tmux/whimrepl.
			Slime will prompt for configuration if slime is not
			configured for the current buffer.

						*v_CTRL-C_CTRL-C* *v_<c-c><c-c>*
{Visual}<c-c><c-c>	Send highlighted text to screen/tmux/whimrepl.

						*CTRL-C_v* *<c-c>v*
						*:SlimeConfig*
<c-c>v			Setup slime to use screen, tmux or whimrepl. You will
:SlimeConfig		be prompted for information regarding how to target
			screen, tmux or whimrepl. See |slime-screen|,
			|slime-tmux| or |slime-whimrepl| for more information.

						*:SlimeSend*
:<range>SlimeSend	Send a [range] of lines to screen, tmux or whimrepl.
			If no range is provided the current line is sent.

                                                *:SlimeSend1*
:SlimeSend1 {text}      Send a single line of text, specified on the command
                        line, to screen, tmux, or whimrepl. A carriage return
                        is automatically appended.


==============================================================================
2. Screen Configuration 			*slime-screen*

By default, GNU Screen is assumed, you don't have to do anything. If you want
to be explicit, you can add this line to your |.vimrc|:
>
	let g:slime_target = "screen"
<
When you invoke vim-slime for the first time (see below), you will be prompted
for more configuration.

Screen session name~

This is what you put in the -S flag, or one of the line of "screen -ls".

Screen window name~

This is the window number or name, zero-based.

==============================================================================
3. Tmux Configuration 				*slime-tmux*

Tmux is not the default, to use it you will have to add this line to your
|.vimrc|:
>
	let g:slime_target = "tmux"
<
When you invoke vim-slime for the first time (see below), you will be prompted
for more configuration.

Tmux socket name~

This is what you put in the -L flag, it will be "default" if you didn't put
anything.

Tmux target pane~

A tmux pane can be targeted with any of the following values:
  - ":" means current window, current pane (a reasonable default)
  - ":i" means the ith window, current pane
  - ":i.j" means the ith window, jth pane
  - "h:i.j" means the tmux session where h is the session identifier 
    (either session name or number), the ith window and the jth pane
  - "%i" means i refers the pane's unique id

To get a list of all the available pane execute the following:
>
	tmux list-panes -a
<
==============================================================================
4. Neovim Configuration 			*slime-neovim*

Neovim is not the default, to use it you will have to add this line to your
|.vimrc|:
>
	let g:slime_target = "neovim"
<
When you invoke vim-slime for the first time (see below), you will be prompted
for more configuration.

jobid~

In the neovim terminal buffer type ":echo b:terminal_job_id" to get the
job_id for that terminal

==============================================================================
5. whimrepl Configuration 			*slime-whimrepl*

whimrepl is not the default, to use it you will have to add this line to
your |.vimrc|:
>
	let g:slime_target = "whimrepl"
<
When you invoke vim-slime for the first time (see below), you will be prompted
for more configuration.

whimrepl server name~

This is the name of the whimrepl server that you wish to target.  whimrepl
displays that name in its banner every time you start up an instance of
whimrepl.

==============================================================================
6. Vim :terminal Configuration 			*slime-vimterminal*

Vim :terminal support targets the terminal emulator built into vim from
version 8.0.0693, accessed via the :terminal command. It does not support the
neovim implementation of :terminal, which is instead supported by the separate
'neovim' target.

Vim :terminal is not the default, to use it you will have to add this line to
your |.vimrc|:
>
        let g:slime_target = "vimterminal"
<
Vim terminal configuration can be set by using the following in your .vimrc:

    let g:slime_vimterminal_config = {options}

for possible options, see help term_start()

When you invoke vim-slime for the first time (see below), you will be prompted
to select from an existing terminal or to create a new one.

==============================================================================
7. Slime Configuration 				*slime-configuration*

Global Variables~
						*g:slime_target*
g:slime_target		Set to either "screen" (default), "tmux" or "whimrepl".

						*g:slime_no_mappings*
g:slime_no_mappings	Set to non zero value to disable the default mappings.

						*g:slime_paste_file*
g:slime_paste_file	Used to transfer data from vim to GNU Screen or tmux.
			This is required for screen and is set to "$HOME/.slime_paste" by default.
			For tmux it is optional; If not set, STDIN will be
			used. Setting this explicitly can work around some
			occasional portability issues.
			whimrepl does not require or support this setting.
						*g:slime_preserve_curpos*
g:slime_preserve_curpos	Set to non zero value to preserve cursor position when
			sending a line or paragraph. Default is 1.


						*g:slime_default_config*
g:slime_default_config	Set to dictionary of pre-filled prompt answer. See
			the README for details: https://github.com/jpalardy/vim-slime

						*g:slime_dont_ask_default*
g:slime_dont_ask_default	Works with g:slime_default_config. See
			the README for details: https://github.com/jpalardy/vim-slime

Mappings~

Slime's default mappings can be overridden by setting up mappings in your
|.vimrc| like so:
>
	xmap <leader>s <Plug>SlimeRegionSend
	nmap <leader>s <Plug>SlimeParagraphSend
<

The following special plugin mappings are provided by slime:

  Used by the default mappings:
  <Plug>SlimeRegionSend		Send {visual} text. Use |xmap|.
  <Plug>SlimeParagraphSend	Send a paragraph. Use |nmap|.
  <Plug>SlimeConfig		Call |:SlimeConfig|. Use |nmap|.

  Optional mappings:
  <Plug>SlimeLineSend		Send {count} line(s). Use |nmap|.
  <Plug>SlimeMotionSend		Send {motion}. Use |nmap|.

Disabling a mapping is as simple as creating a mapping that does not exist,
for example:
>
	nmap <Plug>NoSlimeParagraphSend <Plug>SlimeParagraphSend
<

To use vim like mappings instead of emacs keybindings use the following:
>
	let g:slime_no_mappings = 1
	xmap <leader>s <Plug>SlimeRegionSend
	nmap <leader>s <Plug>SlimeMotionSend
	nmap <leader>ss <Plug>SlimeLineSend
<

==============================================================================
8. Slime Requirements 				*slime-requirements*

Slime requires either screen or tmux to be available and executable. Awk is
used for completion of screen sessions.  whimrepl does not require any
executables, only that 'lein whimrepl' was used to start the Leiningen REPL.

==============================================================================

 vim:tw=78:ts=8:ft=help:norl:
